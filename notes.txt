# ----------------------------------------
#  Getting started
# ----------------------------------------
# Create a container in detached mode (-d) and (-p) map port 80 of host to port 80 of container.
# This automatically downloads an image and starts a container.
# A container is just another process on the host that is isolated.
# A container image is the filesystem that is used to run a container.
# Use docker desktop to monitor status of containers and images.
docker run -d -p 80:80 docker/getting-started

# If the Docker daemon is not running, open Powershell with Admin privileges and execute
& 'C:\Program Files\Docker\Docker\DockerCli.exe' -SwitchDaemon

# Change location where docker stores container images.
https://stackoverflow.com/questions/62441307/how-can-i-change-the-location-of-docker-images-when-using-docker-desktop-on-wsl2

# ----------------------------------------
#  Creating your own image
# ----------------------------------------
# Sample to do list app is located here:
http://localhost/assets/app.zip

# A Dockerfile is a list of text instructions on how to construct an image.
# Create Dockerfile in directory containing application.
# Build a container called todo-app and use the Dockerfile in this directory.
docker build -t todo-app .

# Run the image
docker run -dp 3000:3000 todo-app

# ----------------------------------------
#  Managing images
# ----------------------------------------
# List all images
docker image ls

# Display detailed information on the image image-id
docker image inspect image-id

# Remove image-id
docker image rm image-id

# Create an image named todo-app from the Dockerfile in current directory
docker image build -t todo-app .

# Pull the apache/spark image from a registry
# Find images here: https://hub.docker.com/search?q=
docker image pull apache/spark

# ----------------------------------------
#  Managing containers
# ----------------------------------------
# List all running containers
docker ps

# Remove a container
docker rm container-id -force

# Kill a container
docker kill container-id

# Inspect container logs
docker logs -f container-id

# Start bash temrinal for container
docker exec -it container-id bash
docker exec -it container-id sh

# ----------------------------------------
#  Volumes and persisting container data
# ----------------------------------------
# Volumes connect a part of the container filesystem to the host machine's file system.
# It is used to persist data that is created/updated/deleted on the container.
# Create a volume
docker volume create db

# Run while mounting a volume (named volume)
docker run -dp 3000:3000 -v volume-name:/path/to/mount todo-app
docker run -dp 3000:3000 -v db:/etc/todos todo-app

# Inspect a volume
# On a windows system, it is stored in \\wsl$\docker-desktop-data\data\docker\volumes
docker volume inspect volume-name

# -w sets working directory of container
# -v "/path/to/source/data:/path/to/mount" specifies the source and destination paths of the bind mount.
# node:12-alpine is the image.
# The following command is used to setup a development container to develop node.js applications
docker run -dp 3000:3000 `
    -w /app -v "$(pwd):/app" `
    node:12-alpine `
    sh -c "yarn install && yarn run dev"

# ----------------------------------------
#  Managing volumes
# ----------------------------------------
# List all volumes
docker volume ls

# Remove volume with volume id volume-id
docker volume rm volume-id

# Delete all volumes not currently being referenced by any containers
docker volume prune

# Find the container currently referencing a volume with volume id volume-id
docker container ls -a --filter volume=volume-id

# ----------------------------------------
#  Networking and multi-container applications
# ----------------------------------------
# Two containers run on the same network can communicate with each other.
# Create a network.
docker network create todo-app

# Start a MYSQL container and attach it to the network.
# --network specifies the network to create this container on
# --network-alias specifies the alias of the container on the network
# -v specifies a named volume
# -e specifies environment variables
docker run -d `
     --network todo-app --network-alias mysql `
     -v todo-mysql-data:/var/lib/mysql `
     -e MYSQL_ROOT_PASSWORD=secret `
     -e MYSQL_DATABASE=todos `
     mysql:5.7

# Test connectivity to the mysql database.
docker exec -it <mysql-container-id> mysql -u root -p

# In mysql prompt, check that the todos database is present.
# Then quit the mysql prompt.
show databases;
\q to quit mysql prompt.

# Run a container with the image nicolaka/netshoot.
# This image contains utilities for inspecting and troubleshooting networking issues.
docker run -it --network todo-app nicolaka/netshoot

# Find the the ip address of the mysql container.
# "mysql" is the parameter given to --network-alias when running the mysql container.
dig mysql

# Use environment variables in the todo-app to specify the connection to the MySQL database.
# This is not good practice in production. Instead, use the container orchestrator's secrets feature.
# The image for todo-app has to specifically support these environment variables.
# Inspect the logs to validate that the development container is using the MySQL database.
docker run -dp 3000:3000 `
   -w /app -v "$(pwd):/app" `
   --network todo-app `
   -e MYSQL_HOST=mysql `
   -e MYSQL_USER=root `
   -e MYSQL_PASSWORD=secret `
   -e MYSQL_DB=todos `
   node:12-alpine `
   sh -c "yarn install && yarn run dev"

# Connect to the MySQL database and validate that data is being written.
docker exec -it container-id mysql -p todos
SELECT * FROM todo_items;